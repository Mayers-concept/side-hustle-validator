src/App.js
import React, { useState, useEffect } from 'react';
import { CheckCircle, Target, TrendingUp, Users, DollarSign, Clock, Lightbulb, Star, ArrowRight, RefreshCw } from 'lucide-react';

const SideHustleValidator = () => {
  const [currentStep, setCurrentStep] = useState('input');
  const [idea, setIdea] = useState('');
  const [validationData, setValidationData] = useState({});
  const [validationScore, setValidationScore] = useState(0);
  const [isLoading, setIsLoading] = useState(false);
  const [questions, setQuestions] = useState([]);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [answers, setAnswers] = useState({});
  const [email, setEmail] = useState('');
  const [showEmailCapture, setShowEmailCapture] = useState(false);

  const validationQuestions = [
    {
      id: 'market_size',
      icon: <Users className="w-5 h-5" />,
      question: "How many people in your area have this exact problem daily?",
      placeholder: "e.g., 1000+ dog owners in my city struggle with...",
      category: "Market Demand"
    },
    {
      id: 'payment_willingness',
      icon: <DollarSign className="w-5 h-5" />,
      question: "What do people currently pay to solve this problem?",
      placeholder: "e.g., $50/month for gym membership, $200 for consultant...",
      category: "Revenue Potential"
    },
    {
      id: 'competition_gap',
      icon: <Target className="w-5 h-5" />,
      question: "What's missing from existing solutions?",
      placeholder: "e.g., too expensive, poor customer service, outdated...",
      category: "Competitive Advantage"
    },
    {
      id: 'execution_feasibility',
      icon: <Clock className="w-5 h-5" />,
      question: "Can you create a basic version in 30 days with your current skills?",
      placeholder: "e.g., Yes - I can build a simple website and...",
      category: "Execution Risk"
    },
    {
      id: 'personal_advantage',
      icon: <Star className="w-5 h-5" />,
      question: "What unique advantage do you have for this idea?",
      placeholder: "e.g., 10 years experience in this industry, network of...",
      category: "Personal Fit"
    }
  ];

  const calculateValidationScore = () => {
    const scores = {
      market_size: answers.market_size?.length > 20 ? 20 : 0,
      payment_willingness: answers.payment_willingness?.includes('$') ? 25 : 0,
      competition_gap: answers.competition_gap?.length > 15 ? 20 : 0,
      execution_feasibility: answers.execution_feasibility?.toLowerCase().includes('yes') ? 20 : 0,
      personal_advantage: answers.personal_advantage?.length > 20 ? 15 : 0
    };
    
    return Object.values(scores).reduce((sum, score) => sum + score, 0);
  };

  const getScoreColor = (score) => {
    if (score >= 80) return 'text-green-500';
    if (score >= 60) return 'text-yellow-500';
    return 'text-red-500';
  };

  const getScoreMessage = (score) => {
    if (score >= 80) return "🚀 High Potential! This idea shows strong validation signals.";
    if (score >= 60) return "⚡ Moderate Potential. Address the gaps to improve viability.";
    return "⚠️ Needs Work. Consider pivoting or strengthening weak areas.";
  };

  const handleIdeaSubmit = () => {
    if (idea.trim()) {
      setCurrentStep('validation');
      setCurrentQuestionIndex(0);
    }
  };

  const handleAnswerSubmit = (answer) => {
    const currentQuestion = validationQuestions[currentQuestionIndex];
    setAnswers(prev => ({ ...prev, [currentQuestion.id]: answer }));
    
    if (currentQuestionIndex < validationQuestions.length - 1) {
      setCurrentQuestionIndex(prev => prev + 1);
    } else {
      // Calculate final score
      const finalAnswers = { ...answers, [currentQuestion.id]: answer };
      const score = Object.keys(finalAnswers).reduce((total, key) => {
        const answer = finalAnswers[key];
        if (key === 'market_size' && answer?.length > 20) total += 20;
        if (key === 'payment_willingness' && answer?.includes('$')) total += 25;
        if (key === 'competition_gap' && answer?.length > 15) total += 20;
        if (key === 'execution_feasibility' && answer?.toLowerCase().includes('yes')) total += 20;
        if (key === 'personal_advantage' && answer?.length > 20) total += 15;
        return total;
      }, 0);
      
      setValidationScore(score);
      setCurrentStep('results');
      
      // Show email capture for scores above 40
      if (score >= 40) {
        setTimeout(() => setShowEmailCapture(true), 2000);
      }
    }
  };

  const resetValidator = () => {
    setCurrentStep('input');
    setIdea('');
    setAnswers({});
    setValidationScore(0);
    setCurrentQuestionIndex(0);
    setShowEmailCapture(false);
  };

  if (currentStep === 'input') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 flex items-center justify-center p-4">
        <div className="max-w-2xl w-full bg-white/10 backdrop-blur-lg rounded-3xl p-8 shadow-2xl border border-white/20">
          <div className="text-center mb-8">
            <div className="flex justify-center mb-4">
              <div className="bg-gradient-to-r from-yellow-400 to-orange-500 p-3 rounded-full">
                <Lightbulb className="w-8 h-8 text-white" />
              </div>
            </div>
            <h1 className="text-4xl font-bold text-white mb-4">
              Side Hustle Validator
            </h1>
            <p className="text-xl text-gray-200 mb-8">
              Validate your business idea in 5 minutes with our AI-powered coach
            </p>
          </div>

          <div className="space-y-6">
            <div>
              <label className="block text-white text-lg font-medium mb-3">
                What's your side hustle idea?
              </label>
              <textarea
                value={idea}
                onChange={(e) => setIdea(e.target.value)}
                placeholder="e.g., A meal prep service for busy professionals in my neighborhood..."
                className="w-full h-32 px-4 py-3 bg-white/20 border border-white/30 rounded-xl text-white placeholder-gray-300 focus:outline-none focus:ring-2 focus:ring-yellow-400 focus:border-transparent resize-none"
              />
            </div>

            <button
              onClick={handleIdeaSubmit}
              disabled={!idea.trim()}
              className="w-full bg-gradient-to-r from-yellow-400 to-orange-500 hover:from-yellow-500 hover:to-orange-600 disabled:from-gray-400 disabled:to-gray-500 text-white font-bold py-4 px-6 rounded-xl transition-all duration-300 flex items-center justify-center space-x-2 disabled:cursor-not-allowed"
            >
              <span>Start Validation</span>
              <ArrowRight className="w-5 h-5" />
            </button>
          </div>

          <div className="mt-8 text-center">
            <p className="text-gray-300 text-sm">
              Join 10,000+ entrepreneurs who've validated their ideas
            </p>
          </div>
        </div>
      </div>
    );
  }

  if (currentStep === 'validation') {
    const currentQuestion = validationQuestions[currentQuestionIndex];
    const progress = ((currentQuestionIndex + 1) / validationQuestions.length) * 100;

    return (
      <div className="min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 flex items-center justify-center p-4">
        <div className="max-w-2xl w-full bg-white/10 backdrop-blur-lg rounded-3xl p-8 shadow-2xl border border-white/20">
          <div className="mb-8">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center space-x-2 text-white">
                {currentQuestion.icon}
                <span className="font-medium">{currentQuestion.category}</span>
              </div>
              <span className="text-gray-300 text-sm">
                {currentQuestionIndex + 1} of {validationQuestions.length}
              </span>
            </div>
            
            <div className="w-full bg-white/20 rounded-full h-2 mb-6">
              <div
                className="bg-gradient-to-r from-yellow-400 to-orange-500 h-2 rounded-full transition-all duration-500"
                style={{ width: `${progress}%` }}
              ></div>
            </div>

            <h2 className="text-2xl font-bold text-white mb-6">
              {currentQuestion.question}
            </h2>
          </div>

          <QuestionInput
            placeholder={currentQuestion.placeholder}
            onSubmit={handleAnswerSubmit}
          />
        </div>
      </div>
    );
  }

  if (currentStep === 'results') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 flex items-center justify-center p-4">
        <div className="max-w-4xl w-full bg-white/10 backdrop-blur-lg rounded-3xl p-8 shadow-2xl border border-white/20">
          <div className="text-center mb-8">
            <div className="flex justify-center mb-4">
              <div className={`text-8xl font-bold ${getScoreColor(validationScore)}`}>
                {validationScore}
              </div>
            </div>
            <h2 className="text-3xl font-bold text-white mb-4">
              Validation Score
            </h2>
            <p className="text-xl text-gray-200 mb-8">
              {getScoreMessage(validationScore)}
            </p>
          </div>

          <div className="grid md:grid-cols-2 gap-6 mb-8">
            <div className="bg-white/10 rounded-xl p-6">
              <h3 className="text-xl font-bold text-white mb-4">Your Idea</h3>
              <p className="text-gray-200">{idea}</p>
            </div>

            <div className="bg-white/10 rounded-xl p-6">
              <h3 className="text-xl font-bold text-white mb-4">Validation Breakdown</h3>
              <div className="space-y-3">
                {validationQuestions.map((q, index) => {
                  const hasAnswer = answers[q.id]?.length > 0;
                  return (
                    <div key={q.id} className="flex items-center space-x-2">
                      <CheckCircle className={`w-4 h-4 ${hasAnswer ? 'text-green-400' : 'text-gray-400'}`} />
                      <span className="text-gray-200 text-sm">{q.category}</span>
                    </div>
                  );
                })}
              </div>
            </div>
          </div>

          {showEmailCapture && (
            <div className="bg-gradient-to-r from-yellow-400/20 to-orange-500/20 rounded-xl p-6 mb-6 border border-yellow-400/30">
              <h3 className="text-xl font-bold text-white mb-4">
                🎉 Get Your Detailed Validation Report
              </h3>
              <p className="text-gray-200 mb-4">
                Your idea shows promise! Enter your email to receive a detailed business plan template and next steps.
              </p>
              <div className="flex space-x-3">
                <input
                  type="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  placeholder="your@email.com"
                  className="flex-1 px-4 py-2 bg-white/20 border border-white/30 rounded-lg text-white placeholder-gray-300 focus:outline-none focus:ring-2 focus:ring-yellow-400"
                />
                <button className="bg-gradient-to-r from-yellow-400 to-orange-500 hover:from-yellow-500 hover:to-orange-600 text-white font-bold py-2 px-6 rounded-lg transition-all duration-300">
                  Get Report
                </button>
              </div>
            </div>
          )}

          <div className="flex justify-center space-x-4">
            <button
              onClick={resetValidator}
              className="flex items-center space-x-2 bg-white/20 hover:bg-white/30 text-white font-medium py-3 px-6 rounded-xl transition-all duration-300"
            >
              <RefreshCw className="w-4 h-4" />
              <span>Validate Another Idea</span>
            </button>
          </div>
        </div>
      </div>
    );
  }
};

const QuestionInput = ({ placeholder, onSubmit }) => {
  const [answer, setAnswer] = useState('');

  const handleSubmit = () => {
    if (answer.trim()) {
      onSubmit(answer);
      setAnswer('');
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && e.ctrlKey) {
      handleSubmit();
    }
  };

  return (
    <div className="space-y-4">
      <textarea
        value={answer}
        onChange={(e) => setAnswer(e.target.value)}
        onKeyPress={handleKeyPress}
        placeholder={placeholder}
        className="w-full h-32 px-4 py-3 bg-white/20 border border-white/30 rounded-xl text-white placeholder-gray-300 focus:outline-none focus:ring-2 focus:ring-yellow-400 focus:border-transparent resize-none"
      />
      
      <div className="flex justify-between items-center">
        <p className="text-gray-300 text-sm">
          Ctrl + Enter to submit
        </p>
        <button
          onClick={handleSubmit}
          disabled={!answer.trim()}
          className="bg-gradient-to-r from-yellow-400 to-orange-500 hover:from-yellow-500 hover:to-orange-600 disabled:from-gray-400 disabled:to-gray-500 text-white font-bold py-3 px-8 rounded-xl transition-all duration-300 flex items-center space-x-2 disabled:cursor-not-allowed"
        >
          <span>Next</span>
          <ArrowRight className="w-4 h-4" />
        </button>
      </div>
    </div>
  );
};

export default SideHustleValidator;
